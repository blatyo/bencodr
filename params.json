{"body":"# BEncodr\r\n* **Author** Allen Madsen (blatyo)\r\n* **My Site** http://www.allenmadsen.com\r\n* **Gem** http://gemcutter.org/gems/bencodr\r\n* **Source** http://github.com/blatyo/bencodr\r\n* **Issue Tracker** http://github.com/blatyo/bencodr/issues\r\n* **Build Status** [![Build Status](http://travis-ci.org/blatyo/bencodr.png)](http://travis-ci.org/blatyo/bencodr)\r\n\r\n## Synopsis\r\nThis gem provides a way to encode and parse bencodings used by the Bit Torrent protocol.\r\n\r\n## Installation\r\n\r\nInstall the gem:\r\n\r\n``` bash\r\n    gem install bencodr\r\n```\r\n\r\nRequire it in your ruby files:\r\n\r\n``` ruby\r\n    require 'bencodr'\r\n```\r\n\r\n## Usage\r\n### BEncodr\r\nMost of the functionality of this library can be accessed directly on the BEncodr class.\r\n\r\n``` ruby\r\n    # encoding is just like calling bencode on the object\r\n    BEncodr.bencode(\"string\")    #=> \"6:string\"\r\n\r\n    # decoding is just like calling bdecode on a bencoding\r\n    BEncodr.bdecode(\"6:string\")  #=> \"string\"\r\n\r\n    # you can work directly with files too\r\n    BEncodr.bencode_file(\"my_awesome.torrent\", {:announce => \"http://www.sometracker.com/announce:80\"})\r\n    BEncodr.bdecode_file(\"my_awesome.torrent\") #=> {:announce => \"http://www.sometracker.com/announce:80\"}\r\n```\r\n\r\n### Monkey Patching\r\nIn order to get this functionality on the objects described below, you can call:\r\n\r\n``` ruby\r\n    BEncodr.include!\r\n```\r\n\r\nThis will extend:\r\n\r\n* BEncodr::String\r\n    * String\r\n    * Symbol\r\n    * URI::Generic\r\n    * URI::FTP\r\n    * URI::HTTP\r\n    * URI::HTTPS\r\n    * URI::LDAP\r\n    * URI::LDAPS\r\n* BEncodr::Integer\r\n    * Numeric\r\n    * Time\r\n* BEncodr::List\r\n    * Array\r\n* BEncodr::Dictionary\r\n    * Hash\r\n* BEncodr::IO\r\n    * IO\r\n    * File\r\n\r\n### String\r\nBEncoded strings are length-prefixed base ten followed by a colon and the string.\r\n\r\n``` ruby\r\n    # strings\r\n    \"\".bencode              #=> \"0:\"\r\n    \"string\".bencode        #=> \"6:string\"\r\n\r\n    # symbols\r\n    :symbol.bencode         #=> \"6:symbol\"\r\n\r\n    # URIs\r\n    uri = URI.parse(\"http://github.com/blatyo/bencode\")\r\n    uri.bencode             #=> \"32:http://github.com/blatyo/bencode\"\r\n```\r\n\r\n### Integer\r\nBencoded integers are represented by an 'i' followed by the number in base 10 followed by an 'e'.\r\n\r\n``` ruby\r\n    # integers\r\n    1.bencode               #=> \"i1e\"\r\n    -1.bencode              #=> \"i-1e\"\r\n    10_000_000_000.bencode  #=> \"i10000000000e\"\r\n\r\n    # other numerics\r\n    1.1.bencode             #=> \"i1e\"\r\n    -1e10.bencode           #=> \"i-10000000000e\"\r\n\r\n    # times\r\n    Time.at(4).bencode      #=> \"i4e\"\r\n```\r\n\r\n### List\r\nBencoded lists are encoded as an 'l' followed by their elements (also bencoded) followed by an 'e'.\r\n\r\n``` ruby\r\n    # arrays\r\n    [].bencode                        #=> \"le\"\r\n    [:e, \"a\", 1, Time.at(11)].bencode #=> \"l1:e1:ai1ei11ee\"\r\n```\r\n\r\n### Dictionary\r\nBencoded dictionaries are encoded as a 'd' followed by a list of alternating keys and their corresponding values\r\nfollowed by an 'e'. Keys appear in sorted order (sorted as raw strings, not alphanumerics) and are always strings.\r\n\r\n``` ruby\r\n    # hashes\r\n    {}.bencode                          #=> \"de\"\r\n    {\"string\" => \"string\"}.bencode      #=> \"d6:string6:stringe\"\r\n    {:symbol => :symbol}.bencode        #=> \"d6:symbol6:symbole\"\r\n    {1 => 1}.bencode                    #=> \"d1:1i1ee\"\r\n    {1.1 => 1.1}.bencode                #=> \"d3:1.1i1ee\"\r\n    {{} => {}}.bencode                  #=> \"d2:{}dee\"\r\n\r\n    time = Time.utc(0)\r\n    {time => time}.bencode              #=> \"d23:2000-01-01 00:00:00 UTCi946684800ee\"\r\n\r\n    array = (1..4).to_a\r\n    {array => array}.bencode            #=> \"d12:[1, 2, 3, 4]li1ei2ei3ei4eee\"\r\n\r\n    # Note: keys are sorted as raw strings.\r\n    {:a => 1, \"A\" => 1, 1=> 1}.bencode  #=> \"d1:1i1e1:Ai1e1:ai1ee\"\r\n```\r\n\r\n### Decoding\r\nYou can decode a bencoding by calling bdecode on the string.\r\n\r\n``` ruby\r\n    \"6:string\".bdecode  #=> \"string\"\r\n    \"i1e\".bdecode       #=> 1\r\n    \"le\".bdecode        #=> []\r\n    \"de\".bdecode        #=> {}\r\n```\r\n\r\n### IO and Files\r\nYou can also write and read bencodings.\r\n\r\n``` ruby\r\n    # write to standard out\r\n    IO.bencode(1, \"string\")             #=> \"6:string\" to stdout\r\n    $stdout.bencode(\"string\")           #=> \"6:string\" to stdout\r\n\r\n    # write to file\r\n    File.bencode(\"a.bencode\", \"string\") #=> \"6:string\" to a.bencode\r\n\r\n    file = File.open(\"a.bencode\", \"wb\")\r\n    file.bencode(\"string\")              #=> \"6:string\" to a.bencode\r\n\r\n    # read from standard in\r\n    IO.bdecode(0)                       #=> \"string\"\r\n    $stdin.bdecode                      #=> \"string\"\r\n\r\n    # read from file\r\n    File.bdecode(\"a.bencode\")           #=> \"string\"\r\n\r\n    file = File.open(\"a.bencode\", \"rb\")\r\n    file.bdecode                        #=> \"string\"\r\n```\r\n\r\n### Make Your Own Objects Compatible\r\nWhen using bencodings it may be useful to translate your own objects into bencoded strings.\r\n\r\n``` ruby\r\n    # register string type\r\n    Range.send :include, BEncodr::String\r\n    (1..2).bencode      #=> \"4:1..2\"\r\n\r\n    # register integer type\r\n    NilClass.send :include, BEncodr::Integer\r\n    nil.bencode         #=> \"i0e\"\r\n\r\n    # register list type\r\n    Range.send :include, BEncodr::List\r\n    (1..2).bencode      #=> \"li1ei2ee\"\r\n\r\n    #register dictionary type\r\n    MyClass = Class.new do\r\n      include BEncodr::Dictionary\r\n\r\n      def to_h\r\n        {:a => \"a\", :b => \"b\"}\r\n      end\r\n    end\r\n\r\n    MyClass.new.bencode #=> \"d1:a1:a1:b1:be\"\r\n```\r\n\r\n## Contributors\r\n* [Andrew Nikolaev](https://github.com/quaternion) - Fixed encoding issue\r\n\r\n## Note on Reporting Issues\r\n\r\n* Try to make a failing test case\r\n* Tell me which version of ruby you're using\r\n* Tell me which OS you are using\r\n* Provide me with any extra files if necessary\r\n\r\n## Note on Patches/Pull Requests\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so I don't break it in a\r\n  future version unintentionally.\r\n* Commit, do not mess with rakefile, version, or history.\r\n  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2010 Allen Madsen. See LICENSE for details.","tagline":"This gem provides a way to encode and parse bencodings used by the Bit Torrent protocol.","google":"UA-33059328-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Bencodr"}